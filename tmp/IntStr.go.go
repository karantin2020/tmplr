// This code is generated by 'templr'
// DO NOT EDIT

package tmp

func (this *Int) UnmarshalJSON(b []byte) error {
    if reti, ok := stringInSlice(string(b), nums); ok {
        *this = Int(reti)
    } else {
        return errors.New("Out of range in SetBSON")
    }
    return nil
}

func (this Int) MarshalJSON() ([]byte, error) {
    return []byte(nums[this]), nil
}

func (this *Int) SetBSON(raw bson.Raw) error {
    var res string
    if err := raw.Unmarshal(&res); err != nil {
        return errors.New("Error unmarshal in SetBSON" + err.Error())
    } else {
        if reti, ok := stringInSlice(res, nums); !ok {
            return errors.New("Out of range in SetBSON")
        } else {
            *this = Int(reti)
            return nil
        }
    }
}

func (this Int) GetBSON() (interface{}, error) {
    var i = int(this)-1
    if i < len(nums) && i > -1 {
        return nums[i], nil
    } else {
        return nil, errors.New("Out of range in GetBSON")
    }
}

func (this Int) String() string {
    var i = int(this)
    if i < len(nums) && i > -1 {
        return nums[i]
    } else {
        return ""
    }
}

func (this *CondKind) UnmarshalJSON(b []byte) error {
    if reti, ok := stringInSlice(string(b), conds); ok {
        *this = CondKind(reti)
    } else {
        return errors.New("Out of range in SetBSON")
    }
    return nil
}

func (this CondKind) MarshalJSON() ([]byte, error) {
    return []byte(conds[this]), nil
}

func (this *CondKind) SetBSON(raw bson.Raw) error {
    var res string
    if err := raw.Unmarshal(&res); err != nil {
        return errors.New("Error unmarshal in SetBSON" + err.Error())
    } else {
        if reti, ok := stringInSlice(res, conds); !ok {
            return errors.New("Out of range in SetBSON")
        } else {
            *this = CondKind(reti)
            return nil
        }
    }
}

func (this CondKind) GetBSON() (interface{}, error) {
    var i = int(this)-1
    if i < len(conds) && i > -1 {
        return conds[i], nil
    } else {
        return nil, errors.New("Out of range in GetBSON")
    }
}

func (this CondKind) String() string {
    var i = int(this)
    if i < len(conds) && i > -1 {
        return conds[i]
    } else {
        return ""
    }
}

func (this *CondDo) UnmarshalJSON(b []byte) error {
    if reti, ok := stringInSlice(string(b), cords); ok {
        *this = CondDo(reti)
    } else {
        return errors.New("Out of range in SetBSON")
    }
    return nil
}

func (this CondDo) MarshalJSON() ([]byte, error) {
    return []byte(cords[this]), nil
}

func (this *CondDo) SetBSON(raw bson.Raw) error {
    var res string
    if err := raw.Unmarshal(&res); err != nil {
        return errors.New("Error unmarshal in SetBSON" + err.Error())
    } else {
        if reti, ok := stringInSlice(res, cords); !ok {
            return errors.New("Out of range in SetBSON")
        } else {
            *this = CondDo(reti)
            return nil
        }
    }
}

func (this CondDo) GetBSON() (interface{}, error) {
    var i = int(this)-1
    if i < len(cords) && i > -1 {
        return cords[i], nil
    } else {
        return nil, errors.New("Out of range in GetBSON")
    }
}

func (this CondDo) String() string {
    var i = int(this)
    if i < len(cords) && i > -1 {
        return cords[i]
    } else {
        return ""
    }
}

